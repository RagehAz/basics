// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../../ldbob/bob.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8546056039714418856),
      name: 'AvBob',
      lastPropertyId: const obx_int.IdUid(16, 6282924072760454840),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7393855729073174155),
            name: 'bobID',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4781215831338839488),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(1, 1344455088966247674)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4911377106387050439),
            name: 'width',
            type: 7,
            flags: 8192),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2474453976338899197),
            name: 'height',
            type: 7,
            flags: 8192),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1025274951470156242),
            name: 'sizeMB',
            type: 7,
            flags: 8192),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1294852215928642214),
            name: 'sizeB',
            type: 5,
            flags: 8192),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2107760988221542014),
            name: 'originalURL',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(2, 4764076344706965244)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2429084704171182699),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8458743505894383550),
            name: 'xFilePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5944945391110066327),
            name: 'ownersIDs',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7841997339228967268),
            name: 'mime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3096060785649268743),
            name: 'uploadPath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 5246858158713928868),
            name: 'origin',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 8936083900962511957),
            name: 'caption',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 5905032239364069806),
            name: 'data',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 6282924072760454840),
            name: 'durationMs',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6350843720642060728),
      name: 'BzBob',
      lastPropertyId: const obx_int.IdUid(23, 9079761040576967657),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3504087212048306409),
            name: 'bobID',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1200052759479992603),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(3, 5412283758941971321)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2388051856813370870),
            name: 'bzTypes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8691322543930634465),
            name: 'bzForm',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7749636790784240465),
            name: 'createdAt',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8970572649802885048),
            name: 'power',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6384170869031782220),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 286218546990637477),
            name: 'trigram',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8279169020577051058),
            name: 'logoPath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2745327332121185928),
            name: 'scopes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5232476678546771030),
            name: 'zone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5973172894000971013),
            name: 'about',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 792567521120242804),
            name: 'position',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6255449609436941050),
            name: 'contacts',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 572506788070227337),
            name: 'authors',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 2105057166357351706),
            name: 'pendings',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 568043730078883861),
            name: 'showsTeam',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 7168588305408075119),
            name: 'isVerified',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 2574576911834716631),
            name: 'bzState',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 3102885446781325009),
            name: 'publication',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 7586503565185936225),
            name: 'lastStateChanged',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 5994322758680210204),
            name: 'assetsIDs',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 9079761040576967657),
            name: 'tendersIDs',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 7514025081623240621),
      name: 'FishBob',
      lastPropertyId: const obx_int.IdUid(14, 5669209184320779906),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 183972623363090607),
            name: 'bobID',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2443615494754833755),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(4, 5831280714471771916)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5311069745959181070),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4913321132085482103),
            name: 'bio',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5512275732948842822),
            name: 'contacts',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3746773485423692126),
            name: 'bzTypes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6131815151665569696),
            name: 'bzForm',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5788452166685033777),
            name: 'countryID',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7482929546523443454),
            name: 'imageURL',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7143424247802879278),
            name: 'emailIsFailing',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 704962282227079211),
            name: 'assets',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4259829857468044193),
            name: 'instagramFollowers',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4991490111923210568),
            name: 'managers',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 5669209184320779906),
            name: 'lastEmailSent',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 8159282677131415627),
      name: 'FlyerBob',
      lastPropertyId: const obx_int.IdUid(25, 7521416489284040751),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8315578362083848686),
            name: 'bobID',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8530296045797816204),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(5, 3280500410673353471)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8796851170716416681),
            name: 'headline',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6252097698258336805),
            name: 'trigram',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4565276650467442524),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3936284900462563899),
            name: 'flyerType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7081825726304131945),
            name: 'publishState',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7817626471459059976),
            name: 'phids',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4722619060018438949),
            name: 'showsAuthor',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 889028485151364429),
            name: 'zone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 507682416922765370),
            name: 'authorID',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 721995282482714365),
            name: 'bzID',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 650897811984099112),
            name: 'position',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 3902908023084720996),
            name: 'slides',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 4261815585501331855),
            name: 'times',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 1797154888814082141),
            name: 'hasPriceTag',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 1858560076182803074),
            name: 'isAmazonFlyer',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 7384707587255553723),
            name: 'hasPDF',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 2010644049664255682),
            name: 'score',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 581896935975595974),
            name: 'pdfPath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 1577845426243871640),
            name: 'shareLink',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 7133645661736068058),
            name: 'price',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 6712129076807569224),
            name: 'bzIsActive',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 332176205575783686),
            name: 'affiliateLink',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 7521416489284040751),
            name: 'gtaLink',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 2088454917073490373),
      name: 'UserBob',
      lastPropertyId: const obx_int.IdUid(28, 6726898420861955623),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2441885643398510593),
            name: 'bobID',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8849340202524853364),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(6, 6545283321322806740)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2865399181685478960),
            name: 'signInMethod',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6787144996843124181),
            name: 'isSignedUp',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4562934277932768482),
            name: 'createdAt',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6506664249449272219),
            name: 'need',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5710683068630312362),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3177510387748409477),
            name: 'trigram',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1455476281414974694),
            name: 'picPath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2257766443720919105),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 628248578291880751),
            name: 'company',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 2255088481375547175),
            name: 'gender',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 807629103368524928),
            name: 'zone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 4221846402481404303),
            name: 'language',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 3879016420631432753),
            name: 'location',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 5348959320538520354),
            name: 'contacts',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 6853409059372770722),
            name: 'contactsArePublic',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 7854991071076099298),
            name: 'myBzzIDs',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 7868856842634478214),
            name: 'isAuthor',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 7514831503111803252),
            name: 'emailIsVerified',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 4230166944574386179),
            name: 'isAdmin',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 3993128502623360034),
            name: 'device',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 7757557628482879588),
            name: 'fcmTopics',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 3273996356921895641),
            name: 'savedFlyers',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 5478750699241686417),
            name: 'followedBzz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 7385499251016529844),
            name: 'appState',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 8791211679775932008),
            name: 'lastSeen',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 6726898420861955623),
            name: 'tendersIDs',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 2088454917073490373),
      lastIndexId: const obx_int.IdUid(6, 6545283321322806740),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    AvBob: obx_int.EntityDefinition<AvBob>(
        model: _entities[0],
        toOneRelations: (AvBob object) => [],
        toManyRelations: (AvBob object) => {},
        getId: (AvBob object) => object.bobID,
        setId: (AvBob object, int id) {
          object.bobID = id;
        },
        objectToFB: (AvBob object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final originalURLOffset = object.originalURL == null
              ? null
              : fbb.writeString(object.originalURL!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final xFilePathOffset = object.xFilePath == null
              ? null
              : fbb.writeString(object.xFilePath!);
          final ownersIDsOffset = object.ownersIDs == null
              ? null
              : fbb.writeList(object.ownersIDs!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final mimeOffset =
              object.mime == null ? null : fbb.writeString(object.mime!);
          final uploadPathOffset = object.uploadPath == null
              ? null
              : fbb.writeString(object.uploadPath!);
          final originOffset =
              object.origin == null ? null : fbb.writeString(object.origin!);
          final captionOffset =
              object.caption == null ? null : fbb.writeString(object.caption!);
          final dataOffset =
              object.data == null ? null : fbb.writeString(object.data!);
          fbb.startTable(17);
          fbb.addInt64(0, object.bobID);
          fbb.addOffset(1, idOffset);
          fbb.addFloat32(2, object.width);
          fbb.addFloat32(3, object.height);
          fbb.addFloat32(4, object.sizeMB);
          fbb.addInt32(5, object.sizeB);
          fbb.addOffset(6, originalURLOffset);
          fbb.addOffset(7, nameOffset);
          fbb.addOffset(8, xFilePathOffset);
          fbb.addOffset(9, ownersIDsOffset);
          fbb.addOffset(10, mimeOffset);
          fbb.addOffset(11, uploadPathOffset);
          fbb.addOffset(12, originOffset);
          fbb.addOffset(13, captionOffset);
          fbb.addOffset(14, dataOffset);
          fbb.addInt64(15, object.durationMs);
          fbb.finish(fbb.endTable());
          return object.bobID;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final bobIDParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final xFilePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final ownersIDsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 22);
          final widthParam =
              const fb.Float32Reader().vTableGetNullable(buffer, rootOffset, 8);
          final heightParam = const fb.Float32Reader()
              .vTableGetNullable(buffer, rootOffset, 10);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final sizeMBParam = const fb.Float32Reader()
              .vTableGetNullable(buffer, rootOffset, 12);
          final sizeBParam =
              const fb.Int32Reader().vTableGetNullable(buffer, rootOffset, 14);
          final mimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final dataParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final uploadPathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final originParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final originalURLParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final captionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final durationMsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 34);
          final object = AvBob(
              bobID: bobIDParam,
              id: idParam,
              xFilePath: xFilePathParam,
              ownersIDs: ownersIDsParam,
              width: widthParam,
              height: heightParam,
              name: nameParam,
              sizeMB: sizeMBParam,
              sizeB: sizeBParam,
              mime: mimeParam,
              data: dataParam,
              uploadPath: uploadPathParam,
              origin: originParam,
              originalURL: originalURLParam,
              caption: captionParam,
              durationMs: durationMsParam);

          return object;
        }),
    BzBob: obx_int.EntityDefinition<BzBob>(
        model: _entities[1],
        toOneRelations: (BzBob object) => [],
        toManyRelations: (BzBob object) => {},
        getId: (BzBob object) => object.bobID,
        setId: (BzBob object, int id) {
          object.bobID = id;
        },
        objectToFB: (BzBob object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final bzTypesOffset =
              object.bzTypes == null ? null : fbb.writeString(object.bzTypes!);
          final bzFormOffset =
              object.bzForm == null ? null : fbb.writeString(object.bzForm!);
          final powerOffset =
              object.power == null ? null : fbb.writeString(object.power!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final trigramOffset = object.trigram == null
              ? null
              : fbb.writeList(
                  object.trigram!.map(fbb.writeString).toList(growable: false));
          final logoPathOffset = object.logoPath == null
              ? null
              : fbb.writeString(object.logoPath!);
          final scopesOffset =
              object.scopes == null ? null : fbb.writeString(object.scopes!);
          final zoneOffset =
              object.zone == null ? null : fbb.writeString(object.zone!);
          final aboutOffset =
              object.about == null ? null : fbb.writeString(object.about!);
          final positionOffset = object.position == null
              ? null
              : fbb.writeString(object.position!);
          final contactsOffset = object.contacts == null
              ? null
              : fbb.writeString(object.contacts!);
          final authorsOffset =
              object.authors == null ? null : fbb.writeString(object.authors!);
          final pendingsOffset = object.pendings == null
              ? null
              : fbb.writeString(object.pendings!);
          final bzStateOffset =
              object.bzState == null ? null : fbb.writeString(object.bzState!);
          final publicationOffset = object.publication == null
              ? null
              : fbb.writeString(object.publication!);
          final assetsIDsOffset = object.assetsIDs == null
              ? null
              : fbb.writeList(object.assetsIDs!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final tendersIDsOffset = object.tendersIDs == null
              ? null
              : fbb.writeList(object.tendersIDs!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(24);
          fbb.addInt64(0, object.bobID);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, bzTypesOffset);
          fbb.addOffset(3, bzFormOffset);
          fbb.addInt64(4, object.createdAt);
          fbb.addOffset(5, powerOffset);
          fbb.addOffset(6, nameOffset);
          fbb.addOffset(7, trigramOffset);
          fbb.addOffset(8, logoPathOffset);
          fbb.addOffset(9, scopesOffset);
          fbb.addOffset(10, zoneOffset);
          fbb.addOffset(11, aboutOffset);
          fbb.addOffset(12, positionOffset);
          fbb.addOffset(13, contactsOffset);
          fbb.addOffset(14, authorsOffset);
          fbb.addOffset(15, pendingsOffset);
          fbb.addBool(16, object.showsTeam);
          fbb.addBool(17, object.isVerified);
          fbb.addOffset(18, bzStateOffset);
          fbb.addOffset(19, publicationOffset);
          fbb.addInt64(20, object.lastStateChanged);
          fbb.addOffset(21, assetsIDsOffset);
          fbb.addOffset(22, tendersIDsOffset);
          fbb.finish(fbb.endTable());
          return object.bobID;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final bobIDParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final bzTypesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final bzFormParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final createdAtParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final powerParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final trigramParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 18);
          final logoPathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final scopesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final zoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final aboutParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final positionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final contactsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final authorsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final pendingsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final showsTeamParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36);
          final isVerifiedParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 38);
          final bzStateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 40);
          final publicationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 42);
          final lastStateChangedParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 44);
          final assetsIDsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 46);
          final tendersIDsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 48);
          final object = BzBob(
              bobID: bobIDParam,
              id: idParam,
              bzTypes: bzTypesParam,
              bzForm: bzFormParam,
              createdAt: createdAtParam,
              power: powerParam,
              name: nameParam,
              trigram: trigramParam,
              logoPath: logoPathParam,
              scopes: scopesParam,
              zone: zoneParam,
              about: aboutParam,
              position: positionParam,
              contacts: contactsParam,
              authors: authorsParam,
              pendings: pendingsParam,
              showsTeam: showsTeamParam,
              isVerified: isVerifiedParam,
              bzState: bzStateParam,
              publication: publicationParam,
              lastStateChanged: lastStateChangedParam,
              assetsIDs: assetsIDsParam,
              tendersIDs: tendersIDsParam);

          return object;
        }),
    FishBob: obx_int.EntityDefinition<FishBob>(
        model: _entities[2],
        toOneRelations: (FishBob object) => [],
        toManyRelations: (FishBob object) => {},
        getId: (FishBob object) => object.bobID,
        setId: (FishBob object, int id) {
          object.bobID = id;
        },
        objectToFB: (FishBob object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final bioOffset =
              object.bio == null ? null : fbb.writeString(object.bio!);
          final contactsOffset = object.contacts == null
              ? null
              : fbb.writeString(object.contacts!);
          final bzTypesOffset =
              object.bzTypes == null ? null : fbb.writeString(object.bzTypes!);
          final bzFormOffset =
              object.bzForm == null ? null : fbb.writeString(object.bzForm!);
          final countryIDOffset = object.countryID == null
              ? null
              : fbb.writeString(object.countryID!);
          final imageURLOffset = object.imageURL == null
              ? null
              : fbb.writeString(object.imageURL!);
          final assetsOffset =
              object.assets == null ? null : fbb.writeString(object.assets!);
          final managersOffset = object.managers == null
              ? null
              : fbb.writeString(object.managers!);
          fbb.startTable(15);
          fbb.addInt64(0, object.bobID);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, bioOffset);
          fbb.addOffset(4, contactsOffset);
          fbb.addOffset(5, bzTypesOffset);
          fbb.addOffset(6, bzFormOffset);
          fbb.addOffset(7, countryIDOffset);
          fbb.addOffset(8, imageURLOffset);
          fbb.addBool(9, object.emailIsFailing);
          fbb.addOffset(10, assetsOffset);
          fbb.addInt64(11, object.instagramFollowers);
          fbb.addOffset(12, managersOffset);
          fbb.addInt64(13, object.lastEmailSent);
          fbb.finish(fbb.endTable());
          return object.bobID;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final bobIDParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final bioParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final contactsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final bzTypesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final bzFormParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final countryIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final assetsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final instagramFollowersParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26);
          final managersParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final lastEmailSentParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30);
          final imageURLParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final emailIsFailingParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final object = FishBob(
              bobID: bobIDParam,
              id: idParam,
              name: nameParam,
              bio: bioParam,
              contacts: contactsParam,
              bzTypes: bzTypesParam,
              bzForm: bzFormParam,
              countryID: countryIDParam,
              assets: assetsParam,
              instagramFollowers: instagramFollowersParam,
              managers: managersParam,
              lastEmailSent: lastEmailSentParam,
              imageURL: imageURLParam,
              emailIsFailing: emailIsFailingParam);

          return object;
        }),
    FlyerBob: obx_int.EntityDefinition<FlyerBob>(
        model: _entities[3],
        toOneRelations: (FlyerBob object) => [],
        toManyRelations: (FlyerBob object) => {},
        getId: (FlyerBob object) => object.bobID,
        setId: (FlyerBob object, int id) {
          object.bobID = id;
        },
        objectToFB: (FlyerBob object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final headlineOffset = object.headline == null
              ? null
              : fbb.writeString(object.headline!);
          final trigramOffset = object.trigram == null
              ? null
              : fbb.writeList(
                  object.trigram!.map(fbb.writeString).toList(growable: false));
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final flyerTypeOffset = object.flyerType == null
              ? null
              : fbb.writeString(object.flyerType!);
          final publishStateOffset = object.publishState == null
              ? null
              : fbb.writeString(object.publishState!);
          final phidsOffset = object.phids == null
              ? null
              : fbb.writeList(
                  object.phids!.map(fbb.writeString).toList(growable: false));
          final zoneOffset =
              object.zone == null ? null : fbb.writeString(object.zone!);
          final authorIDOffset = object.authorID == null
              ? null
              : fbb.writeString(object.authorID!);
          final bzIDOffset =
              object.bzID == null ? null : fbb.writeString(object.bzID!);
          final positionOffset = object.position == null
              ? null
              : fbb.writeString(object.position!);
          final slidesOffset =
              object.slides == null ? null : fbb.writeString(object.slides!);
          final timesOffset =
              object.times == null ? null : fbb.writeString(object.times!);
          final pdfPathOffset =
              object.pdfPath == null ? null : fbb.writeString(object.pdfPath!);
          final shareLinkOffset = object.shareLink == null
              ? null
              : fbb.writeString(object.shareLink!);
          final priceOffset =
              object.price == null ? null : fbb.writeString(object.price!);
          final affiliateLinkOffset = object.affiliateLink == null
              ? null
              : fbb.writeString(object.affiliateLink!);
          final gtaLinkOffset =
              object.gtaLink == null ? null : fbb.writeString(object.gtaLink!);
          fbb.startTable(26);
          fbb.addInt64(0, object.bobID);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, headlineOffset);
          fbb.addOffset(3, trigramOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addOffset(5, flyerTypeOffset);
          fbb.addOffset(6, publishStateOffset);
          fbb.addOffset(7, phidsOffset);
          fbb.addBool(8, object.showsAuthor);
          fbb.addOffset(9, zoneOffset);
          fbb.addOffset(10, authorIDOffset);
          fbb.addOffset(11, bzIDOffset);
          fbb.addOffset(12, positionOffset);
          fbb.addOffset(13, slidesOffset);
          fbb.addOffset(14, timesOffset);
          fbb.addBool(15, object.hasPriceTag);
          fbb.addBool(16, object.isAmazonFlyer);
          fbb.addBool(17, object.hasPDF);
          fbb.addInt64(18, object.score);
          fbb.addOffset(19, pdfPathOffset);
          fbb.addOffset(20, shareLinkOffset);
          fbb.addOffset(21, priceOffset);
          fbb.addBool(22, object.bzIsActive);
          fbb.addOffset(23, affiliateLinkOffset);
          fbb.addOffset(24, gtaLinkOffset);
          fbb.finish(fbb.endTable());
          return object.bobID;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final bobIDParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final headlineParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final trigramParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 10);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final flyerTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final publishStateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final phidsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 18);
          final zoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final authorIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final bzIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final positionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final slidesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final timesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final hasPriceTagParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34);
          final isAmazonFlyerParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36);
          final hasPDFParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 38);
          final showsAuthorParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);
          final scoreParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 40);
          final pdfPathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 42);
          final shareLinkParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 44);
          final priceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 46);
          final bzIsActiveParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 48);
          final affiliateLinkParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 50);
          final gtaLinkParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 52);
          final object = FlyerBob(
              bobID: bobIDParam,
              id: idParam,
              headline: headlineParam,
              trigram: trigramParam,
              description: descriptionParam,
              flyerType: flyerTypeParam,
              publishState: publishStateParam,
              phids: phidsParam,
              zone: zoneParam,
              authorID: authorIDParam,
              bzID: bzIDParam,
              position: positionParam,
              slides: slidesParam,
              times: timesParam,
              hasPriceTag: hasPriceTagParam,
              isAmazonFlyer: isAmazonFlyerParam,
              hasPDF: hasPDFParam,
              showsAuthor: showsAuthorParam,
              score: scoreParam,
              pdfPath: pdfPathParam,
              shareLink: shareLinkParam,
              price: priceParam,
              bzIsActive: bzIsActiveParam,
              affiliateLink: affiliateLinkParam,
              gtaLink: gtaLinkParam);

          return object;
        }),
    UserBob: obx_int.EntityDefinition<UserBob>(
        model: _entities[4],
        toOneRelations: (UserBob object) => [],
        toManyRelations: (UserBob object) => {},
        getId: (UserBob object) => object.bobID,
        setId: (UserBob object, int id) {
          object.bobID = id;
        },
        objectToFB: (UserBob object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final signInMethodOffset = object.signInMethod == null
              ? null
              : fbb.writeString(object.signInMethod!);
          final needOffset =
              object.need == null ? null : fbb.writeString(object.need!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final trigramOffset = object.trigram == null
              ? null
              : fbb.writeList(
                  object.trigram!.map(fbb.writeString).toList(growable: false));
          final picPathOffset =
              object.picPath == null ? null : fbb.writeString(object.picPath!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final companyOffset =
              object.company == null ? null : fbb.writeString(object.company!);
          final genderOffset =
              object.gender == null ? null : fbb.writeString(object.gender!);
          final zoneOffset =
              object.zone == null ? null : fbb.writeString(object.zone!);
          final languageOffset = object.language == null
              ? null
              : fbb.writeString(object.language!);
          final locationOffset = object.location == null
              ? null
              : fbb.writeString(object.location!);
          final contactsOffset = object.contacts == null
              ? null
              : fbb.writeString(object.contacts!);
          final myBzzIDsOffset = object.myBzzIDs == null
              ? null
              : fbb.writeList(object.myBzzIDs!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final deviceOffset =
              object.device == null ? null : fbb.writeString(object.device!);
          final fcmTopicsOffset = object.fcmTopics == null
              ? null
              : fbb.writeList(object.fcmTopics!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final savedFlyersOffset = object.savedFlyers == null
              ? null
              : fbb.writeString(object.savedFlyers!);
          final followedBzzOffset = object.followedBzz == null
              ? null
              : fbb.writeString(object.followedBzz!);
          final appStateOffset = object.appState == null
              ? null
              : fbb.writeString(object.appState!);
          final tendersIDsOffset = object.tendersIDs == null
              ? null
              : fbb.writeList(object.tendersIDs!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(29);
          fbb.addInt64(0, object.bobID);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, signInMethodOffset);
          fbb.addBool(3, object.isSignedUp);
          fbb.addInt64(4, object.createdAt);
          fbb.addOffset(5, needOffset);
          fbb.addOffset(6, nameOffset);
          fbb.addOffset(7, trigramOffset);
          fbb.addOffset(8, picPathOffset);
          fbb.addOffset(9, titleOffset);
          fbb.addOffset(10, companyOffset);
          fbb.addOffset(11, genderOffset);
          fbb.addOffset(12, zoneOffset);
          fbb.addOffset(13, languageOffset);
          fbb.addOffset(14, locationOffset);
          fbb.addOffset(15, contactsOffset);
          fbb.addBool(16, object.contactsArePublic);
          fbb.addOffset(17, myBzzIDsOffset);
          fbb.addBool(18, object.isAuthor);
          fbb.addBool(19, object.emailIsVerified);
          fbb.addBool(20, object.isAdmin);
          fbb.addOffset(21, deviceOffset);
          fbb.addOffset(22, fcmTopicsOffset);
          fbb.addOffset(23, savedFlyersOffset);
          fbb.addOffset(24, followedBzzOffset);
          fbb.addOffset(25, appStateOffset);
          fbb.addInt64(26, object.lastSeen);
          fbb.addOffset(27, tendersIDsOffset);
          fbb.finish(fbb.endTable());
          return object.bobID;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final bobIDParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final signInMethodParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final isSignedUpParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10);
          final createdAtParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final needParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final trigramParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 18);
          final picPathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final companyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final genderParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final zoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final languageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final locationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final contactsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final contactsArePublicParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36);
          final myBzzIDsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 38);
          final isAuthorParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 40);
          final emailIsVerifiedParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 42);
          final isAdminParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 44);
          final deviceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 46);
          final fcmTopicsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 48);
          final savedFlyersParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 50);
          final followedBzzParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 52);
          final lastSeenParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 56);
          final appStateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 54);
          final tendersIDsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 58);
          final object = UserBob(
              bobID: bobIDParam,
              id: idParam,
              signInMethod: signInMethodParam,
              isSignedUp: isSignedUpParam,
              createdAt: createdAtParam,
              need: needParam,
              name: nameParam,
              trigram: trigramParam,
              picPath: picPathParam,
              title: titleParam,
              company: companyParam,
              gender: genderParam,
              zone: zoneParam,
              language: languageParam,
              location: locationParam,
              contacts: contactsParam,
              contactsArePublic: contactsArePublicParam,
              myBzzIDs: myBzzIDsParam,
              isAuthor: isAuthorParam,
              emailIsVerified: emailIsVerifiedParam,
              isAdmin: isAdminParam,
              device: deviceParam,
              fcmTopics: fcmTopicsParam,
              savedFlyers: savedFlyersParam,
              followedBzz: followedBzzParam,
              lastSeen: lastSeenParam,
              appState: appStateParam,
              tendersIDs: tendersIDsParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AvBob] entity fields to define ObjectBox queries.
class AvBob_ {
  /// See [AvBob.bobID].
  static final bobID =
      obx.QueryIntegerProperty<AvBob>(_entities[0].properties[0]);

  /// See [AvBob.id].
  static final id = obx.QueryStringProperty<AvBob>(_entities[0].properties[1]);

  /// See [AvBob.width].
  static final width =
      obx.QueryDoubleProperty<AvBob>(_entities[0].properties[2]);

  /// See [AvBob.height].
  static final height =
      obx.QueryDoubleProperty<AvBob>(_entities[0].properties[3]);

  /// See [AvBob.sizeMB].
  static final sizeMB =
      obx.QueryDoubleProperty<AvBob>(_entities[0].properties[4]);

  /// See [AvBob.sizeB].
  static final sizeB =
      obx.QueryIntegerProperty<AvBob>(_entities[0].properties[5]);

  /// See [AvBob.originalURL].
  static final originalURL =
      obx.QueryStringProperty<AvBob>(_entities[0].properties[6]);

  /// See [AvBob.name].
  static final name =
      obx.QueryStringProperty<AvBob>(_entities[0].properties[7]);

  /// See [AvBob.xFilePath].
  static final xFilePath =
      obx.QueryStringProperty<AvBob>(_entities[0].properties[8]);

  /// See [AvBob.ownersIDs].
  static final ownersIDs =
      obx.QueryStringVectorProperty<AvBob>(_entities[0].properties[9]);

  /// See [AvBob.mime].
  static final mime =
      obx.QueryStringProperty<AvBob>(_entities[0].properties[10]);

  /// See [AvBob.uploadPath].
  static final uploadPath =
      obx.QueryStringProperty<AvBob>(_entities[0].properties[11]);

  /// See [AvBob.origin].
  static final origin =
      obx.QueryStringProperty<AvBob>(_entities[0].properties[12]);

  /// See [AvBob.caption].
  static final caption =
      obx.QueryStringProperty<AvBob>(_entities[0].properties[13]);

  /// See [AvBob.data].
  static final data =
      obx.QueryStringProperty<AvBob>(_entities[0].properties[14]);

  /// See [AvBob.durationMs].
  static final durationMs =
      obx.QueryIntegerProperty<AvBob>(_entities[0].properties[15]);
}

/// [BzBob] entity fields to define ObjectBox queries.
class BzBob_ {
  /// See [BzBob.bobID].
  static final bobID =
      obx.QueryIntegerProperty<BzBob>(_entities[1].properties[0]);

  /// See [BzBob.id].
  static final id = obx.QueryStringProperty<BzBob>(_entities[1].properties[1]);

  /// See [BzBob.bzTypes].
  static final bzTypes =
      obx.QueryStringProperty<BzBob>(_entities[1].properties[2]);

  /// See [BzBob.bzForm].
  static final bzForm =
      obx.QueryStringProperty<BzBob>(_entities[1].properties[3]);

  /// See [BzBob.createdAt].
  static final createdAt =
      obx.QueryIntegerProperty<BzBob>(_entities[1].properties[4]);

  /// See [BzBob.power].
  static final power =
      obx.QueryStringProperty<BzBob>(_entities[1].properties[5]);

  /// See [BzBob.name].
  static final name =
      obx.QueryStringProperty<BzBob>(_entities[1].properties[6]);

  /// See [BzBob.trigram].
  static final trigram =
      obx.QueryStringVectorProperty<BzBob>(_entities[1].properties[7]);

  /// See [BzBob.logoPath].
  static final logoPath =
      obx.QueryStringProperty<BzBob>(_entities[1].properties[8]);

  /// See [BzBob.scopes].
  static final scopes =
      obx.QueryStringProperty<BzBob>(_entities[1].properties[9]);

  /// See [BzBob.zone].
  static final zone =
      obx.QueryStringProperty<BzBob>(_entities[1].properties[10]);

  /// See [BzBob.about].
  static final about =
      obx.QueryStringProperty<BzBob>(_entities[1].properties[11]);

  /// See [BzBob.position].
  static final position =
      obx.QueryStringProperty<BzBob>(_entities[1].properties[12]);

  /// See [BzBob.contacts].
  static final contacts =
      obx.QueryStringProperty<BzBob>(_entities[1].properties[13]);

  /// See [BzBob.authors].
  static final authors =
      obx.QueryStringProperty<BzBob>(_entities[1].properties[14]);

  /// See [BzBob.pendings].
  static final pendings =
      obx.QueryStringProperty<BzBob>(_entities[1].properties[15]);

  /// See [BzBob.showsTeam].
  static final showsTeam =
      obx.QueryBooleanProperty<BzBob>(_entities[1].properties[16]);

  /// See [BzBob.isVerified].
  static final isVerified =
      obx.QueryBooleanProperty<BzBob>(_entities[1].properties[17]);

  /// See [BzBob.bzState].
  static final bzState =
      obx.QueryStringProperty<BzBob>(_entities[1].properties[18]);

  /// See [BzBob.publication].
  static final publication =
      obx.QueryStringProperty<BzBob>(_entities[1].properties[19]);

  /// See [BzBob.lastStateChanged].
  static final lastStateChanged =
      obx.QueryIntegerProperty<BzBob>(_entities[1].properties[20]);

  /// See [BzBob.assetsIDs].
  static final assetsIDs =
      obx.QueryStringVectorProperty<BzBob>(_entities[1].properties[21]);

  /// See [BzBob.tendersIDs].
  static final tendersIDs =
      obx.QueryStringVectorProperty<BzBob>(_entities[1].properties[22]);
}

/// [FishBob] entity fields to define ObjectBox queries.
class FishBob_ {
  /// See [FishBob.bobID].
  static final bobID =
      obx.QueryIntegerProperty<FishBob>(_entities[2].properties[0]);

  /// See [FishBob.id].
  static final id =
      obx.QueryStringProperty<FishBob>(_entities[2].properties[1]);

  /// See [FishBob.name].
  static final name =
      obx.QueryStringProperty<FishBob>(_entities[2].properties[2]);

  /// See [FishBob.bio].
  static final bio =
      obx.QueryStringProperty<FishBob>(_entities[2].properties[3]);

  /// See [FishBob.contacts].
  static final contacts =
      obx.QueryStringProperty<FishBob>(_entities[2].properties[4]);

  /// See [FishBob.bzTypes].
  static final bzTypes =
      obx.QueryStringProperty<FishBob>(_entities[2].properties[5]);

  /// See [FishBob.bzForm].
  static final bzForm =
      obx.QueryStringProperty<FishBob>(_entities[2].properties[6]);

  /// See [FishBob.countryID].
  static final countryID =
      obx.QueryStringProperty<FishBob>(_entities[2].properties[7]);

  /// See [FishBob.imageURL].
  static final imageURL =
      obx.QueryStringProperty<FishBob>(_entities[2].properties[8]);

  /// See [FishBob.emailIsFailing].
  static final emailIsFailing =
      obx.QueryBooleanProperty<FishBob>(_entities[2].properties[9]);

  /// See [FishBob.assets].
  static final assets =
      obx.QueryStringProperty<FishBob>(_entities[2].properties[10]);

  /// See [FishBob.instagramFollowers].
  static final instagramFollowers =
      obx.QueryIntegerProperty<FishBob>(_entities[2].properties[11]);

  /// See [FishBob.managers].
  static final managers =
      obx.QueryStringProperty<FishBob>(_entities[2].properties[12]);

  /// See [FishBob.lastEmailSent].
  static final lastEmailSent =
      obx.QueryIntegerProperty<FishBob>(_entities[2].properties[13]);
}

/// [FlyerBob] entity fields to define ObjectBox queries.
class FlyerBob_ {
  /// See [FlyerBob.bobID].
  static final bobID =
      obx.QueryIntegerProperty<FlyerBob>(_entities[3].properties[0]);

  /// See [FlyerBob.id].
  static final id =
      obx.QueryStringProperty<FlyerBob>(_entities[3].properties[1]);

  /// See [FlyerBob.headline].
  static final headline =
      obx.QueryStringProperty<FlyerBob>(_entities[3].properties[2]);

  /// See [FlyerBob.trigram].
  static final trigram =
      obx.QueryStringVectorProperty<FlyerBob>(_entities[3].properties[3]);

  /// See [FlyerBob.description].
  static final description =
      obx.QueryStringProperty<FlyerBob>(_entities[3].properties[4]);

  /// See [FlyerBob.flyerType].
  static final flyerType =
      obx.QueryStringProperty<FlyerBob>(_entities[3].properties[5]);

  /// See [FlyerBob.publishState].
  static final publishState =
      obx.QueryStringProperty<FlyerBob>(_entities[3].properties[6]);

  /// See [FlyerBob.phids].
  static final phids =
      obx.QueryStringVectorProperty<FlyerBob>(_entities[3].properties[7]);

  /// See [FlyerBob.showsAuthor].
  static final showsAuthor =
      obx.QueryBooleanProperty<FlyerBob>(_entities[3].properties[8]);

  /// See [FlyerBob.zone].
  static final zone =
      obx.QueryStringProperty<FlyerBob>(_entities[3].properties[9]);

  /// See [FlyerBob.authorID].
  static final authorID =
      obx.QueryStringProperty<FlyerBob>(_entities[3].properties[10]);

  /// See [FlyerBob.bzID].
  static final bzID =
      obx.QueryStringProperty<FlyerBob>(_entities[3].properties[11]);

  /// See [FlyerBob.position].
  static final position =
      obx.QueryStringProperty<FlyerBob>(_entities[3].properties[12]);

  /// See [FlyerBob.slides].
  static final slides =
      obx.QueryStringProperty<FlyerBob>(_entities[3].properties[13]);

  /// See [FlyerBob.times].
  static final times =
      obx.QueryStringProperty<FlyerBob>(_entities[3].properties[14]);

  /// See [FlyerBob.hasPriceTag].
  static final hasPriceTag =
      obx.QueryBooleanProperty<FlyerBob>(_entities[3].properties[15]);

  /// See [FlyerBob.isAmazonFlyer].
  static final isAmazonFlyer =
      obx.QueryBooleanProperty<FlyerBob>(_entities[3].properties[16]);

  /// See [FlyerBob.hasPDF].
  static final hasPDF =
      obx.QueryBooleanProperty<FlyerBob>(_entities[3].properties[17]);

  /// See [FlyerBob.score].
  static final score =
      obx.QueryIntegerProperty<FlyerBob>(_entities[3].properties[18]);

  /// See [FlyerBob.pdfPath].
  static final pdfPath =
      obx.QueryStringProperty<FlyerBob>(_entities[3].properties[19]);

  /// See [FlyerBob.shareLink].
  static final shareLink =
      obx.QueryStringProperty<FlyerBob>(_entities[3].properties[20]);

  /// See [FlyerBob.price].
  static final price =
      obx.QueryStringProperty<FlyerBob>(_entities[3].properties[21]);

  /// See [FlyerBob.bzIsActive].
  static final bzIsActive =
      obx.QueryBooleanProperty<FlyerBob>(_entities[3].properties[22]);

  /// See [FlyerBob.affiliateLink].
  static final affiliateLink =
      obx.QueryStringProperty<FlyerBob>(_entities[3].properties[23]);

  /// See [FlyerBob.gtaLink].
  static final gtaLink =
      obx.QueryStringProperty<FlyerBob>(_entities[3].properties[24]);
}

/// [UserBob] entity fields to define ObjectBox queries.
class UserBob_ {
  /// See [UserBob.bobID].
  static final bobID =
      obx.QueryIntegerProperty<UserBob>(_entities[4].properties[0]);

  /// See [UserBob.id].
  static final id =
      obx.QueryStringProperty<UserBob>(_entities[4].properties[1]);

  /// See [UserBob.signInMethod].
  static final signInMethod =
      obx.QueryStringProperty<UserBob>(_entities[4].properties[2]);

  /// See [UserBob.isSignedUp].
  static final isSignedUp =
      obx.QueryBooleanProperty<UserBob>(_entities[4].properties[3]);

  /// See [UserBob.createdAt].
  static final createdAt =
      obx.QueryIntegerProperty<UserBob>(_entities[4].properties[4]);

  /// See [UserBob.need].
  static final need =
      obx.QueryStringProperty<UserBob>(_entities[4].properties[5]);

  /// See [UserBob.name].
  static final name =
      obx.QueryStringProperty<UserBob>(_entities[4].properties[6]);

  /// See [UserBob.trigram].
  static final trigram =
      obx.QueryStringVectorProperty<UserBob>(_entities[4].properties[7]);

  /// See [UserBob.picPath].
  static final picPath =
      obx.QueryStringProperty<UserBob>(_entities[4].properties[8]);

  /// See [UserBob.title].
  static final title =
      obx.QueryStringProperty<UserBob>(_entities[4].properties[9]);

  /// See [UserBob.company].
  static final company =
      obx.QueryStringProperty<UserBob>(_entities[4].properties[10]);

  /// See [UserBob.gender].
  static final gender =
      obx.QueryStringProperty<UserBob>(_entities[4].properties[11]);

  /// See [UserBob.zone].
  static final zone =
      obx.QueryStringProperty<UserBob>(_entities[4].properties[12]);

  /// See [UserBob.language].
  static final language =
      obx.QueryStringProperty<UserBob>(_entities[4].properties[13]);

  /// See [UserBob.location].
  static final location =
      obx.QueryStringProperty<UserBob>(_entities[4].properties[14]);

  /// See [UserBob.contacts].
  static final contacts =
      obx.QueryStringProperty<UserBob>(_entities[4].properties[15]);

  /// See [UserBob.contactsArePublic].
  static final contactsArePublic =
      obx.QueryBooleanProperty<UserBob>(_entities[4].properties[16]);

  /// See [UserBob.myBzzIDs].
  static final myBzzIDs =
      obx.QueryStringVectorProperty<UserBob>(_entities[4].properties[17]);

  /// See [UserBob.isAuthor].
  static final isAuthor =
      obx.QueryBooleanProperty<UserBob>(_entities[4].properties[18]);

  /// See [UserBob.emailIsVerified].
  static final emailIsVerified =
      obx.QueryBooleanProperty<UserBob>(_entities[4].properties[19]);

  /// See [UserBob.isAdmin].
  static final isAdmin =
      obx.QueryBooleanProperty<UserBob>(_entities[4].properties[20]);

  /// See [UserBob.device].
  static final device =
      obx.QueryStringProperty<UserBob>(_entities[4].properties[21]);

  /// See [UserBob.fcmTopics].
  static final fcmTopics =
      obx.QueryStringVectorProperty<UserBob>(_entities[4].properties[22]);

  /// See [UserBob.savedFlyers].
  static final savedFlyers =
      obx.QueryStringProperty<UserBob>(_entities[4].properties[23]);

  /// See [UserBob.followedBzz].
  static final followedBzz =
      obx.QueryStringProperty<UserBob>(_entities[4].properties[24]);

  /// See [UserBob.appState].
  static final appState =
      obx.QueryStringProperty<UserBob>(_entities[4].properties[25]);

  /// See [UserBob.lastSeen].
  static final lastSeen =
      obx.QueryIntegerProperty<UserBob>(_entities[4].properties[26]);

  /// See [UserBob.tendersIDs].
  static final tendersIDs =
      obx.QueryStringVectorProperty<UserBob>(_entities[4].properties[27]);
}
